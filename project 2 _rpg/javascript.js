// –ò–≥—Ä–æ–∫
const player = {
    name: '',
    location: 'office',
    health: 100,
    strength: 10,
    defense: 7,
    awareness: 0,
    inventory: ['–ú–æ–±–∏–ª—å–Ω–∏–∫'],
    invitedToWhiteRoom: false,
    foundGlitches: [],
    usedPistol: false,
    fighting: null,
    currentEnemy: null,
    trained: false,
    trainedKungFu: false,
    trainedPilot: false,
    usedGlasses: false,
    foundMedkitToilet: false,
    foundMedkitStairs: false,
    foundMedkitOffice: false,
    foundMedkitMetro: false,
    coffeeCount: 0,
};

// –í—Ä–∞–≥–∏
const enemies = {
    agent: {
        name: '–ê–≥–µ–Ω—Ç',
        health: 70,
        strength: 15,
        description: 'üï∂Ô∏è –ë–µ–∑–ª–∏–∫–∏–π –æ—Ö—Ä–∞–Ω–Ω–∏–∫ —Å–∏—Å—Ç–µ–º—ã.'
    },
    agentSmith: {
        name: '–ê–≥–µ–Ω—Ç –°–º–∏—Ç',
        health: 500,
        strength: 25,
        description: 'üíÄ –ì–ª–∞–≤–Ω—ã–π –∞–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç. –ù–µ—É–º–æ–ª–∏–º –∏ —Å–∏–ª—ë–Ω.'
    }
};

// DOM
const locationName = document.getElementById('location-name');
const locationText = document.getElementById('location-text');
const actionButtons = document.getElementById('action-buttons');
const combatActions = document.getElementById('combat-actions');
const attackBtn = document.getElementById('attack-btn');
const dodgeBtn = document.getElementById('dodge-btn');
const startButton = document.getElementById('start-button');
const startScreen = document.getElementById('start-screen');
const gameInterface = document.getElementById('game-interface');
const characterName = document.getElementById('character-name');
const logPanel = document.getElementById('log-content');

const statHealth = document.getElementById('stat-health');
const statStrength = document.getElementById('stat-strength');
const statDefense = document.getElementById('stat-defense');
const statAwareness = document.getElementById('stat-awareness');
const itemsList = document.getElementById('items');
const restart = document.getElementById('restart-button');

// —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –∫–∞–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ
const canvas = document.getElementById('matrix-canvas');
const ctx = canvas.getContext('2d');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// –°–∏–º–≤–æ–ª—ã (—è–ø–æ–Ω—Å–∫–∏–µ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
const symbols = '„Ç¢„Ç´„Çµ„Çø„Éä„Éè„Éû„É§„É©„ÉØ„Ç¢„Ç§„Ç¶„Ç®„Ç™„Ç´„Ç≠„ÇØ„Ç±„Ç≥„Çµ„Ç∑„Çπ„Çª„ÇΩABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
const fontSize = 16;
const columns = Math.floor(canvas.width / fontSize);

// –ú–∞—Å—Å–∏–≤ –∫–∞–ø–µ–ª—å ‚Äî –æ–¥–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
const drops = Array(columns).fill(1);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
function drawMatrix() {
    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —á—ë—Ä–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ (—ç—Ñ—Ñ–µ–∫—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è)
    ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    ctx.fillStyle = '#028502'; // —Ü–≤–µ—Ç –∫–æ–¥–∞
    ctx.font = fontSize + 'px monospace';

    for (let i = 0; i < drops.length; i++) {
        const text = symbols.charAt(Math.floor(Math.random() * symbols.length));
        ctx.fillText(text, i * fontSize, drops[i] * fontSize);

        // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã —Å–ª—É—á–∞–π–Ω–æ
        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
            drops[i] = 0;
        }

        drops[i]++;
    }

    requestAnimationFrame(drawMatrix);
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
// drawMatrix();


// –õ–æ–∫–∞—Ü–∏–∏
const locations = {
    office: {
        name: '–û—Ñ–∏—Å',
        description: '–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–±–∏–Ω–∫–∏, —è—Ä–∫–∏–π —Å–≤–µ—Ç –∏ —Ö–æ–ª–æ–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä. –ö–æ–ª–ª–µ–≥–∏ –º–æ–ª—á–∞—Ç, –≥–ª—è–¥—è –≤ —ç–∫—Ä–∞–Ω—ã. –í–æ–∑–¥—É—Ö –∑–∞—Å—Ç–æ—è–ª—Å—è. –¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –∑–≤–æ–Ω—è—Ç, –Ω–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É —Ä–∞–∑–¥–∞—ë—Ç—Å—è –µ–ª–µ —Å–ª—ã—à–Ω—ã–π —Ç—Ä–µ—Å–∫ –≤ –ø—Ä–æ–≤–æ–¥–∞—Ö. –û–¥–∏–Ω –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–æ—Ö–æ–∂–µ, –¥–∞–∂–µ –Ω–µ –º–æ—Ä–≥–∞–µ—Ç.',
        actions: ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä', '–û—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫', '–í—ã–π—Ç–∏ –≤ –∫–æ—Ä–∏–¥–æ—Ä']
    },
    corridor: {
        name: '–ö–æ—Ä–∏–¥–æ—Ä',
        description: '–¢–∏—Ö–∏–π –∏ –¥–ª–∏–Ω–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–≤–µ—Ä–µ–π. –ü–∞—Ö–Ω–µ—Ç –ø–ª–∞—Å—Ç–∏–∫–æ–º –∏ –ø—ã–ª—å—é. –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –¥–≤–µ—Ä–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–≤–æ—Ä–∞—á–∏–≤–∞–µ—à—å—Å—è. –°–≤–µ—Ç –º–æ—Ä–≥–∞–µ—Ç —Å —Ä–∏—Ç–º–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ –∏–º –∫—Ç–æ-—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç.',
        actions: ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Ñ–∏—Å', '–ó–∞–π—Ç–∏ –≤ —Ç—É–∞–ª–µ—Ç', '–ü—Ä–æ–π—Ç–∏ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—É', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è'],
        glitches: ['–û—â—É—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ –∫–æ—Ä–∏–¥–æ—Ä —É–¥–ª–∏–Ω—è–µ—Ç—Å—è –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏']
    },
    toilet: {
        name: '–¢—É–∞–ª–µ—Ç',
        description: '–•–æ–ª–æ–¥–Ω—ã–π –∫–∞—Ñ–µ–ª—å, –±–ª–µ–∫–ª–æ–µ –∑–µ—Ä–∫–∞–ª–æ –∏ –æ—â—É—â–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. –ù–∞ –ø–æ–ª—É –≤–∞–ª—è–µ—Ç—Å—è –∞–ø—Ç–µ—á–∫–∞. –ú–∏–≥–∞–Ω–∏–µ –ª–∞–º–ø—ã –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∑–µ—Ä–∫–∞–ª–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. –ö—Ç–æ-—Ç–æ –±—É–¥—Ç–æ –æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥—ã, –≤–µ–¥—É—â–∏–µ –≤ —Å—Ç–µ–Ω—É.',
        actions: ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∏–¥–æ—Ä', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è'],
        glitches: [
            'üö∞ –ò–∑ –∫—Ä–∞–Ω–∞ —Ç–µ—á—ë—Ç —á—ë—Ä–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å, —Ö–æ—Ç—è —Ç—ã –µ–≥–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª.',
            'ü™û –í –∑–µ—Ä–∫–∞–ª–µ —Ç–≤–æ—ë –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –º–æ—Ä–≥–∞–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.'
        ]
    },
    stairs: {
        name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞',
        description: '–ë–µ—Ç–æ–Ω–Ω—ã–µ —Å—Ç—É–ø–µ–Ω–∏ –≤–µ–¥—É—Ç –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑. –°–≤–µ—Ç —Ç—É—Å–∫–ª—ã–π, —à–∞–≥–∏ –≥—É–ª–∫–æ –æ—Ç–¥–∞—é—Ç—Å—è —ç—Ö–æ–º. –ù–∞ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–æ–ª—ë—Ç–æ–≤ –ª–µ–∂–∏—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π –≥–∞–ª—Å—Ç—É–∫. –ù–∞ —Å—Ç–µ–Ω–µ ‚Äî —Ç—Ä–µ—â–∏–Ω–∞, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ —Ü–∏—Ñ—Ä—É 1.',
        actions: ['–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –∫—Ä—ã—à—É', '–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é', '–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∏–¥–æ—Ä', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è'],
        glitches: ['–¢–µ–Ω—å –æ—Ç –ø–µ—Ä–∏–ª –¥–≤–∏–∂–µ—Ç—Å—è —Å–∞–º–∞ –ø–æ —Å–µ–±–µ', '–ö–æ—à–∫–∞ –ø—Ä–æ–±–µ–≥–∞–µ—Ç –º–∏–º–æ... –∏ —Å–Ω–æ–≤–∞']
    },
    street: {
        name: '–£–ª–∏—Ü–∞',
        description: '–ú–∏—Ä —Å–Ω–∞—Ä—É–∂–∏ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ª—É—á—à–µ ‚Äî –ø—Ä–æ—Ö–æ–∂–∏–µ –∏–∑–±–µ–≥–∞—é—Ç –≤–∑–≥–ª—è–¥–æ–≤, –º–∞—à–∏–Ω—ã —Å—Ç–æ—è—Ç –≤ –ø—Ä–æ–±–∫–µ, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–∏–≥–Ω–∞–ª–∏—Ç. –í–∏—Ç—Ä–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è, –∫–∞–∫ –±—É–¥—Ç–æ –∑–∞—Ü–∏–∫–ª–µ–Ω—ã. –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —Å–º–æ—Ç—Ä–∏—Ç —Å–∫–≤–æ–∑—å —Ç–µ–±—è, –∫–∞–∫ –±—É–¥—Ç–æ –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç.',
        actions: ['–ü—Ä–æ–π—Ç–∏ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—É', '–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –º–µ—Ç—Ä–æ', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è'],
        glitches: [
            '–í–µ—Ç–µ—Ä –¥—É–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É, –∞ –æ–±–ª–∞–∫–∞ ‚Äî –≤ –¥—Ä—É–≥—É—é',
            '–õ—é–¥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ç–µ–±—è, –∫–∞–∫ –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –∑–Ω–∞—é—Ç'
        ]
    },
    metro: {
        name: '–ú–µ—Ç—Ä–æ',
        description: '–°—Ç–∞–Ω—Ü–∏—è –ø—É—Å—Ç–∞, —Ç–∞–±–ª–æ –º–∏–≥–∞–µ—Ç, –Ω–æ –ø–æ–µ–∑–¥–æ–≤ –Ω–µ—Ç. –ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å. –û–¥–∏–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–æ–≤ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ¬´1999¬ª. –†—è–¥–æ–º —Å–≤–µ—Ç–∏—Ç—Å—è –∫–æ—Ñ–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ —Ç—É—Ç –∂–∏–≤–æ–µ.',
        actions: ['–û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–Ω–Ω–µ–ª—å', '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É–ª–∏—Ü—É', '–ó–∞–π—Ç–∏ –≤ –±–µ–ª—É—é –¥–≤–µ—Ä—å', '–í–∑—è—Ç—å –∫–æ—Ñ–µ', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è'],
        glitches: [
            '–¢–∞–±–ª–æ –º–∏–≥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: 010101...',
            '–¢—ã –∑–∞–º–µ—á–∞–µ—à—å –±–µ–ª—É—é –¥–≤–µ—Ä—å –≤ —Å—Ç–µ–Ω–µ, –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–¥–µ—Å—å –±—ã—Ç—å',
            'üéß –°–ª—ã—à–µ–Ω –∑–≤—É–∫ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–≥–æ—Å—è –ø–æ–µ–∑–¥–∞... –Ω–æ —Ä–µ–ª—å—Å—ã –ø—É—Å—Ç—ã'
        ]
    },
    rooftop: {
        name: '–ö—Ä—ã—à–∞',
        description: '–ì–æ—Ä–æ–¥ —Å—Ç–µ–ª–µ—Ç—Å—è –ø–æ–¥ –Ω–æ–≥–∞–º–∏. –í–æ–∑–¥—É—Ö –ø–ª–æ—Ç–Ω—ã–π, –±—É–¥—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ —Ç–æ–±–æ–π. –°–ø—Ä–∞–≤–∞ —Ç–æ—Ä—á–∏—Ç –∞–Ω—Ç–µ–Ω–Ω–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –Ω–∏–∫—É–¥–∞. –ù–∞ –ø–∞—Ä–∞–ø–µ—Ç–µ –ª–µ–∂–∏—Ç —á–µ–π-—Ç–æ —Å—Ç–∞—Ä—ã–π –±–æ—Ç–∏–Ω–æ–∫ ‚Äî –æ–¥–∏–Ω–æ–∫–∏–π –∏ —Å—Ç—Ä–∞–Ω–Ω—ã–π.',
        actions: ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–∏–∑', '–ü—Ä–æ–π—Ç–∏ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—É', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è'],
        glitches: ['–ü—Ç–∏—Ü–∞ –ø–æ–≤–∏—Å–ª–∞ –≤ –≤–æ–∑–¥—É—Ö–µ –∏ –∏—Å—á–µ–∑–ª–∞']
    },
    whiteRoom: {
        name: '–ë–µ–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞',
        description: '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –±–µ–ª–∏–∑–Ω–∞. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å—Ç–æ–∏—Ç –ú–æ—Ä—Ñ–µ—É—Å —Å —Ç–∞–±–ª–µ—Ç–∫–∞–º–∏. –ó–¥–µ—Å—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ. –°–ª–æ–≤–Ω–æ —Å–∞–º–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∑–¥–µ—Å—å –Ω–∞ –ø–∞—É–∑–µ. –ó–≤—É–∫ –≥–∞—Å–Ω–µ—Ç, –±—É–¥—Ç–æ —Ç—ã –≤ –≤–∞–∫—É—É–º–µ.',
        actions: ['–í–∑—è—Ç—å üî¥ –∫—Ä–∞—Å–Ω—É—é —Ç–∞–±–ª–µ—Ç–∫—É', '–í–∑—è—Ç—å üîµ —Å–∏–Ω—é—é —Ç–∞–±–ª–µ—Ç–∫—É', '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è']
    },
    construct: {
        name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
        description: '–ë–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ–º, –∫–Ω–∏–≥–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å–≤–æ–∏—Ç—å –≤—Å—ë, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—à—å. –ê—Ä—Å–µ–Ω–∞–ª –≤—Å–ø—ã—Ö–∏–≤–∞–µ—Ç –Ω–∞ —Å–µ–∫—É–Ω–¥—É –∏ —Å–Ω–æ–≤–∞ –∏—Å—á–µ–∑–∞–µ—Ç. –¢—ã –æ—â—É—â–∞–µ—à—å —Å—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–∫–∞–ª—ã–≤–∞–Ω–∏–µ –≤ –∑–∞—Ç—ã–ª–∫–µ, —Å–ª–æ–≤–Ω–æ –º–æ–∑–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.',
        actions: ['–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', '–ò–∑—É—á–∏—Ç—å –∫—É–Ω–≥-—Ñ—É', '–ò–∑—É—á–∏—Ç—å –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–í—ã–π—Ç–∏ –≤ –ú–∞—Ç—Ä–∏—Ü—É'],
        glitches: ['–û—Ä—É–∂–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞', '–í—Ä–µ–º—è –∫–∞–∂–µ—Ç—Å—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–º']
    },
    matrix: {
        name: '–ú–∞—Ç—Ä–∏—Ü–∞',
        description: '–¢—ã –∏–¥—ë—à—å –ø–æ —É–ª–∏—Ü–µ —Ä—è–¥–æ–º —Å –ú–æ—Ä—Ñ–µ—É—Å–æ–º. –û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –º–∏—Ä ‚Äî –ª–∏—à—å –∏–ª–ª—é–∑–∏—è. –õ—é–¥–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é—Ç, —á—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–ª–µ–Ω—É. –í—Å–µ –≤–æ–∫—Ä—É–≥ –¥–≤–∏–≥–∞—é—Ç—Å—è –ø–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º, —Å–ª–æ–≤–Ω–æ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é. –ú–æ—Ä—Ñ–µ—É—Å –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç—Ç–∏—Ö –ª—é–¥–µ–π –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤—ã¬ª.',
        actions: ['–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é'],
        glitches: [
            'üë† –ñ–µ–Ω—â–∏–Ω–∞ –≤ –∫—Ä–∞—Å–Ω–æ–º –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–≤–æ—ë –≤–Ω–∏–º–∞–Ω–∏–µ. –¢—ã –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—à—å—Å—è... –Ω–æ –≥–¥–µ –æ–Ω–∞?',
            'üîÅ –ü—Ä–æ—Ö–æ–∂–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—à—ë–ª –º–∏–º–æ, —Å–Ω–æ–≤–∞ –∏–¥—ë—Ç –Ω–∞–≤—Å—Ç—Ä–µ—á—É ‚Äî –¥–µ–∂–∞–≤—é?'
        ]
    },
    serverRoom: {
        name: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è',
        description: '‚ö° –ü–æ–¥–∑–µ–º–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –≤ –∑–¥–∞–Ω–∏–∏, –≤—Å—è —É—Å—Ç–∞–≤–ª–µ–Ω–∞ –º–µ—Ä—Ü–∞—é—â–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏. –í –≤–æ–∑–¥—É—Ö–µ –ø–∞—Ö–Ω–µ—Ç –æ–∑–æ–Ω–æ–º. –ü—Ä–æ–≤–æ–¥–∞, –∫–∞–∫ –∫–æ—Ä–Ω–∏, —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã.',
        actions: ['–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', '–û—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–ª' ,'–ü—Ä–æ–π—Ç–∏ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—É'],
        glitches: [
            '–û–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–µ–±—è —Ä–µ–±—ë–Ω–∫–æ–º.',
            '–¶–∏—Ñ—Ä—ã –±–µ–≥—É—Ç –Ω–∞–∑–∞–¥.'
        ]
    },
};


// –°–ª—É—à–∞—Ç–µ–ª–∏
startButton.addEventListener('click', () => {
    const input = document.getElementById('player-name');
    const name = input.value.trim();
    if (!name) return;

    player.name = name;
    characterName.textContent = name;

    startScreen.classList.add('hidden');
    gameInterface.classList.remove('hidden');


    updateStats();
    updateInventory();
    updateLocation();
});

restart.addEventListener('click', () => {location.reload()});
attackBtn.addEventListener('click', () => handleCombat('attack'));
dodgeBtn.addEventListener('click', () => handleCombat('dodge'));
window.addEventListener('resize', () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function updateStats() {
    statHealth.textContent = player.health;
    statStrength.textContent = player.strength;
    statDefense.textContent = player.defense;
    statAwareness.textContent = player.awareness;
}

function updateInventory() {
    itemsList.innerHTML = '';
    player.inventory.forEach(item => {
        const button = document.createElement('button');
        button.textContent = item;
        button.classList.add('item');
        itemsList.appendChild(button);
        button.addEventListener('click', () => useItem(item));
    });
}

function removeItem(item) {
    const index = player.inventory.indexOf(item);
    if (index !== -1) player.inventory.splice(index, 1);
    updateInventory();
}

function useItem(item) {
    switch (item) {
        case '–ê–ø—Ç–µ—á–∫–∞':
            player.health += 40;
            log('üíä –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞–ø—Ç–µ—á–∫—É. +40 –∑–¥–æ—Ä–æ–≤—å—è');
            removeItem(item);
            break;

        case '–ö–æ—Ñ–µ':
            player.health += 30;
            log('‚òï –í—ã –≤—ã–ø–∏–ª–∏ –∫–æ—Ñ–µ. +30 –∑–¥–æ—Ä–æ–≤—å—è');
            removeItem(item);
            break;

        case '–ü–∏—Å—Ç–æ–ª–µ—Ç':
            if (!player.usedPistol) {
                player.strength += 80;
                player.usedPistol = true;
                log('üî´ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–∏—Å—Ç–æ–ª–µ—Ç. +80 –∫ —Å–∏–ª–µ (—Ä–∞–∑–æ–≤–æ)');
                removeItem(item);
                updateStats();
            }
            break;

        case '–ú–æ–±–∏–ª—å–Ω–∏–∫':
            log('üìû –ü—Ä–æ—Å—Ç–æ –º–æ–±–∏–ª—å–Ω–∏–∫.');
            break;

        case '–û—á–∫–∏':
            if (!player.usedGlasses) {
                player.awareness += 25;
                player.defense += 7;
                player.strength += 5;
                player.usedGlasses = true;
                drawMatrix() // –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
                log('üï∂Ô∏è –¢—ã –Ω–∞–¥–µ–ª –æ—á–∫–∏ ‚Äî –∏ –≤—Å—ë –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ú–∏—Ä –±–æ–ª—å—à–µ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—ã—á–Ω—ã–º: —Å—Ç–µ–Ω—ã, –æ–±—ä–µ–∫—Ç—ã, –ª—é–¥–∏, –¥–∞–∂–µ –≤–æ–∑–¥—É—Ö ‚Äî –≤—Å—ë —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±–µ–≥—É—â–µ–≥–æ –∑–µ–ª—ë–Ω–æ–≥–æ –∫–æ–¥–∞.. +25 –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.');
                log(`üëä +5 –∫ —Å–∏–ª–µ, +7 –∫ –∑–∞—â–∏—Ç–µ`)
                updateStats();
            } else {
                log('üï∂Ô∏è –û—á–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.');
            }
            break;
    }
    updateStats();
}

// –õ–æ–∫–∞—Ü–∏—è
function updateLocation() {
    const loc = locations[player.location];
    locationName.textContent = loc.name;
    locationText.textContent = loc.description;

    actionButtons.innerHTML = '';
    loc.actions.forEach(action => {
        const btn = document.createElement('button');
        btn.textContent = action;
        btn.addEventListener('click', () => handleAction(action));
        actionButtons.appendChild(btn);
    });

    log(`üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: ${loc.name}`);

    const dangerZones = ['corridor', 'stairs', 'metro', 'serverRoom'];

    if (player.awareness > 60 && player.location === 'rooftop') {
        startFight('agentSmith');
    } else if (
        player.awareness > 23 &&
        player.fighting === null &&
        dangerZones.includes(player.location) &&
        Math.random() < 0.8 // 80% —à–∞–Ω—Å
    ) {
        startFight('agent');
    } else {
        endFight();
    }
}

function log(msg) {
    const p = document.createElement('p');
    p.textContent = msg;
    logPanel.appendChild(p);
    logPanel.scrollTop = logPanel.scrollHeight;
}

// –ë–æ–π
let enemyAttackInterval = null;

function startFight(enemyKey) {
    const base= enemies[enemyKey];
    const enemy = {...base} // –∫–æ–ø–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    enemy.health = base.health;

    player.fighting = enemyKey;
    player.currentEnemy = enemy;

    log(`‚ö†Ô∏è ${enemy.name} –ø–æ—è–≤–∏–ª—Å—è! ${enemy.description}`);
    combatActions.classList.remove('hidden');

    setInterval(() => {
        if (player.fighting === enemyKey && enemy.health > 0) {
            const difficultyFactor = Math.floor(player.awareness / 8) // –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏
            const baseRetaliation = Math.max(enemy.strength - player.defense, 5);
            const variability = Math.floor(Math.random() * 6) - 3; // –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç -3 –¥–æ +2
            const retaliation = Math.max(baseRetaliation + variability + difficultyFactor, 1);
            player.health -= retaliation;
            log(`üîÅ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç: -${retaliation} –∑–¥–æ—Ä–æ–≤—å—è`);
            updateStats();

            if (player.health <= 0) {
                clearInterval(enemyAttackInterval);
                endGame('‚ò†Ô∏è –í—ã –±—ã–ª–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã.');
            }

        }
    }, 3500);
}

function endFight() {
    player.fighting = null;
    combatActions.classList.add('hidden');
    if (enemyAttackInterval !== null) {
        clearInterval(enemyAttackInterval);
        enemyAttackInterval = null;
    }
}

function handleCombat(action) {
    const enemy = player.currentEnemy;
    if (!enemy || enemy.health <= 0) {
        log(`‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.`);
        return;
    }

    if (action === 'attack') {
        const damage = player.strength;
        enemy.health -= damage;
        log(`üëä –í—ã –Ω–∞–Ω–µ—Å–ª–∏ ${damage} —É—Ä–æ–Ω–∞ ${enemy.name}. ü©∏–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${enemy.health > 0 ? enemy.health : 0} –∑–¥–æ—Ä–æ–≤—å—è`);

        if (enemy.health <= 0) {
            log(`‚úÖ ${enemy.name} –ø–æ–±–µ–∂–¥—ë–Ω! +10 –∫ —Å–∏–ª–µ`);
            player.strength += 5;
            updateStats();
            endFight();
            return;
        }

        const baseRetaliation = Math.max(enemy.strength - player.defense, 5);
        const variability = Math.floor(Math.random() * 6) - 3; // –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç -3 –¥–æ +2
        const retaliation = Math.max(baseRetaliation + variability, 1);
        player.health -= retaliation;
        log(`üîÅ ${enemy.name} –æ—Ç–≤–µ—á–∞–µ—Ç —É–¥–∞—Ä–æ–º: -${retaliation} –∑–¥–æ—Ä–æ–≤—å—è`);
        updateStats();

        if (player.health <= 0) endGame('‚ò†Ô∏è –í—ã –±—ã–ª–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã.');
    }

    if (action === 'dodge') {
        player.defense = Math.max(0, player.defense - 1);
        updateStats();

        if (player.fighting === 'agentSmith') {
            log('‚ùå –û—Ç –∞–≥–µ–Ω—Ç–∞ –°–º–∏—Ç–∞ –Ω–µ —É–π—Ç–∏!');
            return;
        }

        if (Math.random() < 0.6) {
            enemy.health -= 5;
            log(`üí® –í—ã —É—Å–ø–µ—à–Ω–æ —É–∫–ª–æ–Ω–∏–ª–∏—Å—å! –∏ –Ω–∞–Ω–µ—Å–ª–∏ —É—Ä–æ–Ω–∞ –Ω–∞ -5 –∑–¥–æ—Ä–æ–≤—å—è!`);
            endFight();
        } else {
            const retaliation = Math.max(enemy.strength - player.defense, 5);
            player.health -= retaliation;
            log(`üòµ –ù–µ —É–¥–∞–ª–æ—Å—å —É–∫–ª–æ–Ω–∏—Ç—å—Å—è! –ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: -${retaliation} HP`);
            updateStats();

            if (player.health <= 0) endGame('‚ò†Ô∏è –í–∞—Å –æ–¥–æ–ª–µ–ª–∏.');
        }
    }
}


// function endGame(message) {
//     drawMatrix()
//     log(message);
//     actionButtons.innerHTML = '';
//     combatActions.classList.add('hidden');
// }

// –î–µ–π—Å—Ç–≤–∏—è
function handleAction(action) {
    switch (action) {
        case '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä':
            if (!player.foundGlitches.includes('monitor')) {
                player.foundGlitches.push('monitor');
                player.awareness += 7;
                log('üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä –º–µ—Ä—Ü–∞–µ—Ç –Ω–µ—á–∏—Ç–∞–µ–º—ã–º –∑–µ–ª—ë–Ω—ã–º –∫–æ–¥–æ–º. +7 –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏');
                updateStats();
            } else {
                log('üñ•Ô∏è –≠–∫—Ä–∞–Ω –ø—É—Å—Ç...');
            }
            break;

        case '–û—Ç–∫—Ä—ã—Ç—å —è—â–∏–∫':
            if (!player.inventory.includes('–ü–∏—Å—Ç–æ–ª–µ—Ç')) {
                player.inventory.push('–ü–∏—Å—Ç–æ–ª–µ—Ç');
                log('üóÉÔ∏è –í —è—â–∏–∫–µ –ª–µ–∂–∞–ª –ø–∏—Å—Ç–æ–ª–µ—Ç!');
                updateInventory();
            } else {
                log('üóÉÔ∏è –í —è—â–∏–∫–µ –ø—É—Å—Ç–æ.');
            }
            break;

        case '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–∏–∑':
            player.awareness += 5;
            log('üî≠ –ù–µ—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–±—è. +5 –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏');
            updateStats();
            break;

        case '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è': {
            const loc = locations[player.location];
            const glitches = loc.glitches || [];
            const newGlitch = glitches.find(g => !player.foundGlitches.includes(g));
            if (newGlitch) {
                player.foundGlitches.push(newGlitch);
                player.awareness += 8;
                log(`üß† ${newGlitch}. +8 –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏`);
                updateStats();
            } else {
                log('üîç –í—Å—ë –∫–∞–∂–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º...');
            }
            checkAwareness();
            break;
        }

        case '–í—ã–π—Ç–∏ –≤ –∫–æ—Ä–∏–¥–æ—Ä':
            player.location = 'corridor';
            updateLocation();
            break;

        case '–ó–∞–π—Ç–∏ –≤ —Ç—É–∞–ª–µ—Ç':
            player.location = 'toilet';
            updateLocation();

            if (!player.foundMedkitToilet) {
                player.inventory.push('–ê–ø—Ç–µ—á–∫–∞');
                player.foundMedkit = true;
                updateInventory();
                log('üöΩ –í—ã –Ω–∞—à–ª–∏ –∞–ø—Ç–µ—á–∫—É!');
            }
            break;

        case '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∏–¥–æ—Ä':
            player.location = 'corridor';
            updateLocation();
            break;

        case '–ü—Ä–æ–π—Ç–∏ –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—É':
            player.location = 'stairs';
            updateLocation();

            if (!player.foundMedkitStairs) {
                player.inventory.push('–ê–ø—Ç–µ—á–∫–∞');
                player.foundMedkitStairs = true;
                updateInventory();
                log('üöΩ –í—ã –Ω–∞—à–ª–∏ –∞–ø—Ç–µ—á–∫—É!');
            }
            break;

        case '–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –∫—Ä—ã—à—É':
            if (player.inventory.includes('–ü—Ä–æ–ø—É—Å–∫')) {
                player.location = 'rooftop';
                updateLocation();
            } else {
                log('üö´ –õ–µ—Å—Ç–Ω–∏—Ü–∞ –Ω–∞ –∫—Ä—ã—à—É –∑–∞–∫—Ä—ã—Ç–∞. –ù—É–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫.');
            }
            break;

        case '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Ñ–∏—Å':
            player.location = 'office';
            updateLocation();

            if (!player.foundMedkitOffice) {
                player.inventory.push('–ê–ø—Ç–µ—á–∫–∞');
                player.foundMedkitOffice = true;
                updateInventory();
                log('üöΩ –í—ã –Ω–∞—à–ª–∏ –∞–ø—Ç–µ—á–∫—É!');
            }
            break;

        case '–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É':
            player.location = 'street';
            updateLocation();
            break;

        case '–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –º–µ—Ç—Ä–æ':
            player.location = 'metro';
            updateLocation();

            if (!player.foundMedkitMetro) {
                player.inventory.push('–ê–ø—Ç–µ—á–∫–∞');
                player.foundMedkitMetro = true;
                updateInventory();
                log('üöΩ –í—ã –Ω–∞—à–ª–∏ –∞–ø—Ç–µ—á–∫—É!');
            }
            break;

        case '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É–ª–∏—Ü—É':
            player.location = 'street';
            updateLocation();
            break;

        case '–û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–Ω–Ω–µ–ª—å':
            if (!player.inventory.includes('–ü—Ä–æ–ø—É—Å–∫')) {
                player.inventory.push('–ü—Ä–æ–ø—É—Å–∫');
                updateInventory();
                log('ü™™ –í—ã –Ω–∞—à–ª–∏ –ü—Ä–æ–ø—É—Å–∫! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∏ –Ω–∞ –∫—Ä—ã—à—É.');
            } else {
                log('ü™™ –ó–¥–µ—Å—å –ø—É—Å—Ç–æ... –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ —É –≤–∞—Å.');
            }
            break;

        case '–í–∑—è—Ç—å –∫–æ—Ñ–µ':
            if (!player.coffeeCount) player.coffeeCount = 0;

            if (player.coffeeCount < 3) {
                player.inventory.push('–ö–æ—Ñ–µ');
                player.coffeeCount++;
                log(`‚òï –í—ã –¥–æ—Å—Ç–∞–ª–∏ –∫–æ—Ñ–µ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∞.`);
                updateInventory();
            } else {
                log('‚òï –ê–≤—Ç–æ–º–∞—Ç –ø—É—Å—Ç. –ö–æ—Ñ–µ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–¥–∞—ë—Ç—Å—è.');
            }
            break;

        case '–ó–∞–π—Ç–∏ –≤ –±–µ–ª—É—é –¥–≤–µ—Ä—å':
            if (player.awareness >= 50 && player.invitedToWhiteRoom) {
                player.location = 'whiteRoom';
                updateLocation();
            } else {
                log('üö™ –î–≤–µ—Ä—å –∫–∞–∂–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤.');
            }
            break;

        case '–í—ã–π—Ç–∏ –≤ –ú–∞—Ç—Ä–∏—Ü—É':
            player.location = 'matrix';
            updateLocation();
            break;

        case '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é':
            player.location = 'construct';
            updateLocation();
            break;

        case '–í–∑—è—Ç—å üî¥ –∫—Ä–∞—Å–Ω—É—é —Ç–∞–±–ª–µ—Ç–∫—É':
            player.health = 100;
            player.location = 'construct';
            log('üî¥ –¢—ã –≤—ã–±—Ä–∞–ª –∏—Å—Ç–∏–Ω—É. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.');
            log('üß† –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
            drawMatrix()
            updateStats();
            updateLocation();
            break;

        case '–í–∑—è—Ç—å üîµ —Å–∏–Ω—é—é —Ç–∞–±–ª–µ—Ç–∫—É':
            if (player.inventory.includes('–ö–æ—Ñ–µ') || player.usedPistol) {
                endGame('üò¥ –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–µ–±–µ –¥–∞–ª–∞ –≤—Å—ë ‚Äî –∫–æ–º—Ñ–æ—Ä—Ç, –∫–æ—Ñ–µ –∏ –æ—Ä—É–∂–∏–µ. –¢—ã –≤—ã–±—Ä–∞–ª –µ—ë —Å–Ω–æ–≤–∞.');
            } else {
                endGame('üí§ –¢—ã –∑–∞—Å–Ω—É–ª. –ò–ª–∏ –≤—Å—ë –±—ã–ª–æ —Å–Ω–æ–º?..');
            }
            break;

        case '–ò–∑—É—á–∏—Ç—å –∫—É–Ω–≥-—Ñ—É':
            if (!player.trainedKungFu) {
                player.trainedKungFu = true;
                player.strength += 20;
                log('ü•ã –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ö—É–Ω–≥-–§—É. 20 –∫ —Å–∏–ª–µ');
                updateStats();
            } else {
                log('üìÅ –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ –∫—É–Ω–≥-—Ñ—É.');
            }
            break;

        case '–ò–∑—É—á–∏—Ç—å –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
            if (!player.trainedPilot) {
                player.trainedPilot = true;
                player.defense += 10;
                log('üöÅ –í—ã –∏–∑—É—á–∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª—ë—Ç–æ–º. +10 –∫ –∑–∞—â–∏—Ç–µ');
                updateStats();
            } else {
                log('üìÅ –ü–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Å–≤–æ–µ–Ω–æ.');
            }
            break;

        case '–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é':
            if (player.inventory.includes('–ü—Ä–æ–ø—É—Å–∫')) {
                player.location = 'serverRoom';
                updateLocation();
            } else {
                log('üö´ –î–≤–µ—Ä—å –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∑–∞–∫—Ä—ã—Ç–∞. –ù—É–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫.');
            }
            break;

        case '–û—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–ª':
            if (!player.inventory.includes('–û—á–∫–∏')) {
                player.inventory.push('–û—á–∫–∏');
                log('üï∂Ô∏è –í—ã –Ω–∞—à–ª–∏ —á—ë—Ä–Ω—ã–µ –æ—á–∫–∏.');
                updateInventory();
            } else {
                log('üï∂Ô∏è –û—á–∫–∏ —É–∂–µ —É –≤–∞—Å.');
            }
            break;

        default:
            log('‚ùì –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ...');
    }
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–æ–Ω–∫–∞ –ú–æ—Ä—Ñ–µ—É—Å–∞
function checkAwareness() {
    if (player.awareness >= 70 && !player.invitedToWhiteRoom) {
        player.invitedToWhiteRoom = true;
        log('üìû –ó–≤–æ–Ω–∏—Ç –º–æ–±–∏–ª—å–Ω–∏–∫. –≠—Ç–æ –ú–æ—Ä—Ñ–µ—É—Å...');
        log('üï¥Ô∏è "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫? –≠—Ç–æ—Ç –º–∏—Ä ‚Äî –ª–∏—à—å —Ñ–∞—Å–∞–¥."');
        log('üï¥Ô∏è "–í—Å—ë, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å ‚Äî –ª–æ–∂—å, —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ."');
        log('üï¥Ô∏è "–¢—ã –≥–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É? –Ø –∂–¥—É —Ç–µ–±—è –≤ –ë–µ–ª–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ó–∞ –±–µ–ª–æ–π –¥–≤–µ—Ä—å—é."');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∫–æ–Ω—Ü–æ–≤–∫–∏
function endGame(message) {
    drawMatrix()
    log(message);
    actionButtons.innerHTML = '';
    combatActions.classList.add('hidden');

    gameInterface.classList.add('hidden');
    const endingScreen = document.getElementById('ending-screen');
    const endMessage = document.getElementById('end-message');

    endMessage.textContent = message;
    endingScreen.classList.remove('hidden');
}